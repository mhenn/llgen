// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeaconSignal.proto

#include "BeaconSignal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Pose2D_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pose2D_Pose2D_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_Time_2eproto;
namespace llsf_msgs {
class BeaconSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeaconSignal> _instance;
} _BeaconSignal_default_instance_;
}  // namespace llsf_msgs
static void InitDefaultsscc_info_BeaconSignal_BeaconSignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_BeaconSignal_default_instance_;
    new (ptr) ::llsf_msgs::BeaconSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::BeaconSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BeaconSignal_BeaconSignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BeaconSignal_BeaconSignal_2eproto}, {
      &scc_info_Time_Time_2eproto.base,
      &scc_info_Pose2D_Pose2D_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BeaconSignal_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_BeaconSignal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BeaconSignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BeaconSignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, time_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, seq_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, number_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, team_name_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, peer_name_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, team_color_),
  PROTOBUF_FIELD_OFFSET(::llsf_msgs::BeaconSignal, pose_),
  2,
  4,
  6,
  0,
  1,
  5,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::llsf_msgs::BeaconSignal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::llsf_msgs::_BeaconSignal_default_instance_),
};

const char descriptor_table_protodef_BeaconSignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022BeaconSignal.proto\022\tllsf_msgs\032\nTime.pr"
  "oto\032\nTeam.proto\032\014Pose2D.proto\"\336\001\n\014Beacon"
  "Signal\022\035\n\004time\030\001 \002(\0132\017.llsf_msgs.Time\022\013\n"
  "\003seq\030\002 \002(\004\022\016\n\006number\030\010 \002(\r\022\021\n\tteam_name\030"
  "\004 \002(\t\022\021\n\tpeer_name\030\005 \002(\t\022#\n\nteam_color\030\006"
  " \001(\0162\017.llsf_msgs.Team\022\037\n\004pose\030\007 \001(\0132\021.ll"
  "sf_msgs.Pose2D\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017"
  "\022\014\n\010MSG_TYPE\020\001B5\n\037org.robocup_logistics."
  "llsf_msgsB\022BeaconSignalProtos"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BeaconSignal_2eproto_deps[3] = {
  &::descriptor_table_Pose2D_2eproto,
  &::descriptor_table_Team_2eproto,
  &::descriptor_table_Time_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BeaconSignal_2eproto_sccs[1] = {
  &scc_info_BeaconSignal_BeaconSignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BeaconSignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BeaconSignal_2eproto = {
  false, false, descriptor_table_protodef_BeaconSignal_2eproto, "BeaconSignal.proto", 349,
  &descriptor_table_BeaconSignal_2eproto_once, descriptor_table_BeaconSignal_2eproto_sccs, descriptor_table_BeaconSignal_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_BeaconSignal_2eproto::offsets,
  file_level_metadata_BeaconSignal_2eproto, 1, file_level_enum_descriptors_BeaconSignal_2eproto, file_level_service_descriptors_BeaconSignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BeaconSignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BeaconSignal_2eproto)), true);
namespace llsf_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeaconSignal_CompType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BeaconSignal_2eproto);
  return file_level_enum_descriptors_BeaconSignal_2eproto[0];
}
bool BeaconSignal_CompType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BeaconSignal_CompType BeaconSignal::COMP_ID;
constexpr BeaconSignal_CompType BeaconSignal::MSG_TYPE;
constexpr BeaconSignal_CompType BeaconSignal::CompType_MIN;
constexpr BeaconSignal_CompType BeaconSignal::CompType_MAX;
constexpr int BeaconSignal::CompType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BeaconSignal::InitAsDefaultInstance() {
  ::llsf_msgs::_BeaconSignal_default_instance_._instance.get_mutable()->time_ = const_cast< ::llsf_msgs::Time*>(
      ::llsf_msgs::Time::internal_default_instance());
  ::llsf_msgs::_BeaconSignal_default_instance_._instance.get_mutable()->pose_ = const_cast< ::llsf_msgs::Pose2D*>(
      ::llsf_msgs::Pose2D::internal_default_instance());
}
class BeaconSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<BeaconSignal>()._has_bits_);
  static const ::llsf_msgs::Time& time(const BeaconSignal* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::llsf_msgs::Pose2D& pose(const BeaconSignal* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000057) ^ 0x00000057) != 0;
  }
};

const ::llsf_msgs::Time&
BeaconSignal::_Internal::time(const BeaconSignal* msg) {
  return *msg->time_;
}
const ::llsf_msgs::Pose2D&
BeaconSignal::_Internal::pose(const BeaconSignal* msg) {
  return *msg->pose_;
}
void BeaconSignal::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void BeaconSignal::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
BeaconSignal::BeaconSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:llsf_msgs.BeaconSignal)
}
BeaconSignal::BeaconSignal(const BeaconSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_name(),
      GetArena());
  }
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_peer_name()) {
    peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_peer_name(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new ::llsf_msgs::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::llsf_msgs::Pose2D(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.BeaconSignal)
}

void BeaconSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeaconSignal_BeaconSignal_2eproto.base);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&time_)) + sizeof(number_));
}

BeaconSignal::~BeaconSignal() {
  // @@protoc_insertion_point(destructor:llsf_msgs.BeaconSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeaconSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete pose_;
}

void BeaconSignal::ArenaDtor(void* object) {
  BeaconSignal* _this = reinterpret_cast< BeaconSignal* >(object);
  (void)_this;
}
void BeaconSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeaconSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeaconSignal& BeaconSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeaconSignal_BeaconSignal_2eproto.base);
  return *internal_default_instance();
}


void BeaconSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.BeaconSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      peer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_) -
        reinterpret_cast<char*>(&seq_)) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeaconSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .llsf_msgs.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "llsf_msgs.BeaconSignal.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string peer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "llsf_msgs.BeaconSignal.peer_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .llsf_msgs.Team team_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::llsf_msgs::Team_IsValid(val))) {
            _internal_set_team_color(static_cast<::llsf_msgs::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .llsf_msgs.Pose2D pose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeaconSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.BeaconSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Time time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // required uint64 seq = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq(), target);
  }

  // required string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // required string peer_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_peer_name().data(), static_cast<int>(this->_internal_peer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.peer_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_peer_name(), target);
  }

  // optional .llsf_msgs.Team team_color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_team_color(), target);
  }

  // optional .llsf_msgs.Pose2D pose = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pose(this), target, stream);
  }

  // required uint32 number = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.BeaconSignal)
  return target;
}

size_t BeaconSignal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.BeaconSignal)
  size_t total_size = 0;

  if (_internal_has_team_name()) {
    // required string team_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_name());
  }

  if (_internal_has_peer_name()) {
    // required string peer_name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_name());
  }

  if (_internal_has_time()) {
    // required .llsf_msgs.Time time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (_internal_has_seq()) {
    // required uint64 seq = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  if (_internal_has_number()) {
    // required uint32 number = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  return total_size;
}
size_t BeaconSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.BeaconSignal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000057) ^ 0x00000057) == 0) {  // All required fields are present.
    // required string team_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_name());

    // required string peer_name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_name());

    // required .llsf_msgs.Time time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);

    // required uint64 seq = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());

    // required uint32 number = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .llsf_msgs.Pose2D pose = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // optional .llsf_msgs.Team team_color = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeaconSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.BeaconSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const BeaconSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeaconSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.BeaconSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.BeaconSignal)
    MergeFrom(*source);
  }
}

void BeaconSignal::MergeFrom(const BeaconSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.BeaconSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_peer_name(from._internal_peer_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_time()->::llsf_msgs::Time::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000010u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_color_ = from.team_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeaconSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.BeaconSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeaconSignal::CopyFrom(const BeaconSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.BeaconSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconSignal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_time()) {
    if (!time_->IsInitialized()) return false;
  }
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  return true;
}

void BeaconSignal::InternalSwap(BeaconSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_name_.Swap(&other->peer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeaconSignal, number_)
      + sizeof(BeaconSignal::number_)
      - PROTOBUF_FIELD_OFFSET(BeaconSignal, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BeaconSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::llsf_msgs::BeaconSignal* Arena::CreateMaybeMessage< ::llsf_msgs::BeaconSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::llsf_msgs::BeaconSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
