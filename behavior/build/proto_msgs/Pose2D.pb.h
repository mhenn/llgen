// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pose2D.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Pose2D_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Pose2D_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Pose2D_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Pose2D_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Pose2D_2eproto;
namespace llsf_msgs {
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
}  // namespace llsf_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::llsf_msgs::Pose2D* Arena::CreateMaybeMessage<::llsf_msgs::Pose2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace llsf_msgs {

// ===================================================================

class Pose2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.Pose2D) */ {
 public:
  inline Pose2D() : Pose2D(nullptr) {};
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const final {
    return CreateMaybeMessage<Pose2D>(nullptr);
  }

  Pose2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "llsf_msgs.Pose2D";
  }
  protected:
  explicit Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Pose2D_2eproto);
    return ::descriptor_table_Pose2D_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOriFieldNumber = 4,
  };
  // required .llsf_msgs.Time timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::llsf_msgs::Time& timestamp() const;
  ::llsf_msgs::Time* release_timestamp();
  ::llsf_msgs::Time* mutable_timestamp();
  void set_allocated_timestamp(::llsf_msgs::Time* timestamp);
  private:
  const ::llsf_msgs::Time& _internal_timestamp() const;
  ::llsf_msgs::Time* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::llsf_msgs::Time* timestamp);
  ::llsf_msgs::Time* unsafe_arena_release_timestamp();

  // required float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float ori = 4;
  bool has_ori() const;
  private:
  bool _internal_has_ori() const;
  public:
  void clear_ori();
  float ori() const;
  void set_ori(float value);
  private:
  float _internal_ori() const;
  void _internal_set_ori(float value);
  public:

  // @@protoc_insertion_point(class_scope:llsf_msgs.Pose2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::llsf_msgs::Time* timestamp_;
  float x_;
  float y_;
  float ori_;
  friend struct ::TableStruct_Pose2D_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose2D

// required .llsf_msgs.Time timestamp = 1;
inline bool Pose2D::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool Pose2D::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::llsf_msgs::Time& Pose2D::_internal_timestamp() const {
  const ::llsf_msgs::Time* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::llsf_msgs::Time*>(
      &::llsf_msgs::_Time_default_instance_);
}
inline const ::llsf_msgs::Time& Pose2D::timestamp() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Pose2D.timestamp)
  return _internal_timestamp();
}
inline void Pose2D::unsafe_arena_set_allocated_timestamp(
    ::llsf_msgs::Time* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:llsf_msgs.Pose2D.timestamp)
}
inline ::llsf_msgs::Time* Pose2D::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::llsf_msgs::Time* Pose2D::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Pose2D.timestamp)
  _has_bits_[0] &= ~0x00000001u;
  ::llsf_msgs::Time* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::llsf_msgs::Time* Pose2D::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Time>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::llsf_msgs::Time* Pose2D::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Pose2D.timestamp)
  return _internal_mutable_timestamp();
}
inline void Pose2D::set_allocated_timestamp(::llsf_msgs::Time* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Pose2D.timestamp)
}

// required float x = 2;
inline bool Pose2D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pose2D::has_x() const {
  return _internal_has_x();
}
inline void Pose2D::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Pose2D::_internal_x() const {
  return x_;
}
inline float Pose2D::x() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Pose2D.x)
  return _internal_x();
}
inline void Pose2D::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Pose2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Pose2D.x)
}

// required float y = 3;
inline bool Pose2D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pose2D::has_y() const {
  return _internal_has_y();
}
inline void Pose2D::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Pose2D::_internal_y() const {
  return y_;
}
inline float Pose2D::y() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Pose2D.y)
  return _internal_y();
}
inline void Pose2D::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void Pose2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Pose2D.y)
}

// required float ori = 4;
inline bool Pose2D::_internal_has_ori() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pose2D::has_ori() const {
  return _internal_has_ori();
}
inline void Pose2D::clear_ori() {
  ori_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Pose2D::_internal_ori() const {
  return ori_;
}
inline float Pose2D::ori() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Pose2D.ori)
  return _internal_ori();
}
inline void Pose2D::_internal_set_ori(float value) {
  _has_bits_[0] |= 0x00000008u;
  ori_ = value;
}
inline void Pose2D::set_ori(float value) {
  _internal_set_ori(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Pose2D.ori)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Pose2D_2eproto
