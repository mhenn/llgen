// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeaconSignal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BeaconSignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BeaconSignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
#include "Team.pb.h"
#include "Pose2D.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BeaconSignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BeaconSignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BeaconSignal_2eproto;
namespace llsf_msgs {
class BeaconSignal;
class BeaconSignalDefaultTypeInternal;
extern BeaconSignalDefaultTypeInternal _BeaconSignal_default_instance_;
}  // namespace llsf_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::llsf_msgs::BeaconSignal* Arena::CreateMaybeMessage<::llsf_msgs::BeaconSignal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace llsf_msgs {

enum BeaconSignal_CompType : int {
  BeaconSignal_CompType_COMP_ID = 2000,
  BeaconSignal_CompType_MSG_TYPE = 1
};
bool BeaconSignal_CompType_IsValid(int value);
constexpr BeaconSignal_CompType BeaconSignal_CompType_CompType_MIN = BeaconSignal_CompType_MSG_TYPE;
constexpr BeaconSignal_CompType BeaconSignal_CompType_CompType_MAX = BeaconSignal_CompType_COMP_ID;
constexpr int BeaconSignal_CompType_CompType_ARRAYSIZE = BeaconSignal_CompType_CompType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeaconSignal_CompType_descriptor();
template<typename T>
inline const std::string& BeaconSignal_CompType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeaconSignal_CompType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeaconSignal_CompType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeaconSignal_CompType_descriptor(), enum_t_value);
}
inline bool BeaconSignal_CompType_Parse(
    const std::string& name, BeaconSignal_CompType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeaconSignal_CompType>(
    BeaconSignal_CompType_descriptor(), name, value);
}
// ===================================================================

class BeaconSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.BeaconSignal) */ {
 public:
  inline BeaconSignal() : BeaconSignal(nullptr) {};
  virtual ~BeaconSignal();

  BeaconSignal(const BeaconSignal& from);
  BeaconSignal(BeaconSignal&& from) noexcept
    : BeaconSignal() {
    *this = ::std::move(from);
  }

  inline BeaconSignal& operator=(const BeaconSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeaconSignal& operator=(BeaconSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeaconSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeaconSignal* internal_default_instance() {
    return reinterpret_cast<const BeaconSignal*>(
               &_BeaconSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BeaconSignal& a, BeaconSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(BeaconSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeaconSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeaconSignal* New() const final {
    return CreateMaybeMessage<BeaconSignal>(nullptr);
  }

  BeaconSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeaconSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeaconSignal& from);
  void MergeFrom(const BeaconSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeaconSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "llsf_msgs.BeaconSignal";
  }
  protected:
  explicit BeaconSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BeaconSignal_2eproto);
    return ::descriptor_table_BeaconSignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BeaconSignal_CompType CompType;
  static constexpr CompType COMP_ID =
    BeaconSignal_CompType_COMP_ID;
  static constexpr CompType MSG_TYPE =
    BeaconSignal_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return BeaconSignal_CompType_IsValid(value);
  }
  static constexpr CompType CompType_MIN =
    BeaconSignal_CompType_CompType_MIN;
  static constexpr CompType CompType_MAX =
    BeaconSignal_CompType_CompType_MAX;
  static constexpr int CompType_ARRAYSIZE =
    BeaconSignal_CompType_CompType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompType_descriptor() {
    return BeaconSignal_CompType_descriptor();
  }
  template<typename T>
  static inline const std::string& CompType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompType_Name.");
    return BeaconSignal_CompType_Name(enum_t_value);
  }
  static inline bool CompType_Parse(const std::string& name,
      CompType* value) {
    return BeaconSignal_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 4,
    kPeerNameFieldNumber = 5,
    kTimeFieldNumber = 1,
    kPoseFieldNumber = 7,
    kSeqFieldNumber = 2,
    kTeamColorFieldNumber = 6,
    kNumberFieldNumber = 8,
  };
  // required string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_team_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team_name(
      std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // required string peer_name = 5;
  bool has_peer_name() const;
  private:
  bool _internal_has_peer_name() const;
  public:
  void clear_peer_name();
  const std::string& peer_name() const;
  void set_peer_name(const std::string& value);
  void set_peer_name(std::string&& value);
  void set_peer_name(const char* value);
  void set_peer_name(const char* value, size_t size);
  std::string* mutable_peer_name();
  std::string* release_peer_name();
  void set_allocated_peer_name(std::string* peer_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_peer_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_peer_name(
      std::string* peer_name);
  private:
  const std::string& _internal_peer_name() const;
  void _internal_set_peer_name(const std::string& value);
  std::string* _internal_mutable_peer_name();
  public:

  // required .llsf_msgs.Time time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::llsf_msgs::Time& time() const;
  ::llsf_msgs::Time* release_time();
  ::llsf_msgs::Time* mutable_time();
  void set_allocated_time(::llsf_msgs::Time* time);
  private:
  const ::llsf_msgs::Time& _internal_time() const;
  ::llsf_msgs::Time* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::llsf_msgs::Time* time);
  ::llsf_msgs::Time* unsafe_arena_release_time();

  // optional .llsf_msgs.Pose2D pose = 7;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::llsf_msgs::Pose2D& pose() const;
  ::llsf_msgs::Pose2D* release_pose();
  ::llsf_msgs::Pose2D* mutable_pose();
  void set_allocated_pose(::llsf_msgs::Pose2D* pose);
  private:
  const ::llsf_msgs::Pose2D& _internal_pose() const;
  ::llsf_msgs::Pose2D* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::llsf_msgs::Pose2D* pose);
  ::llsf_msgs::Pose2D* unsafe_arena_release_pose();

  // required uint64 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .llsf_msgs.Team team_color = 6;
  bool has_team_color() const;
  private:
  bool _internal_has_team_color() const;
  public:
  void clear_team_color();
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);
  private:
  ::llsf_msgs::Team _internal_team_color() const;
  void _internal_set_team_color(::llsf_msgs::Team value);
  public:

  // required uint32 number = 8;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:llsf_msgs.BeaconSignal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_name_;
  ::llsf_msgs::Time* time_;
  ::llsf_msgs::Pose2D* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  int team_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  friend struct ::TableStruct_BeaconSignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeaconSignal

// required .llsf_msgs.Time time = 1;
inline bool BeaconSignal::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool BeaconSignal::has_time() const {
  return _internal_has_time();
}
inline const ::llsf_msgs::Time& BeaconSignal::_internal_time() const {
  const ::llsf_msgs::Time* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::llsf_msgs::Time*>(
      &::llsf_msgs::_Time_default_instance_);
}
inline const ::llsf_msgs::Time& BeaconSignal::time() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.time)
  return _internal_time();
}
inline void BeaconSignal::unsafe_arena_set_allocated_time(
    ::llsf_msgs::Time* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:llsf_msgs.BeaconSignal.time)
}
inline ::llsf_msgs::Time* BeaconSignal::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::llsf_msgs::Time* BeaconSignal::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:llsf_msgs.BeaconSignal.time)
  _has_bits_[0] &= ~0x00000004u;
  ::llsf_msgs::Time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::llsf_msgs::Time* BeaconSignal::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000004u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Time>(GetArena());
    time_ = p;
  }
  return time_;
}
inline ::llsf_msgs::Time* BeaconSignal::mutable_time() {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.BeaconSignal.time)
  return _internal_mutable_time();
}
inline void BeaconSignal::set_allocated_time(::llsf_msgs::Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.BeaconSignal.time)
}

// required uint64 seq = 2;
inline bool BeaconSignal::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BeaconSignal::has_seq() const {
  return _internal_has_seq();
}
inline void BeaconSignal::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeaconSignal::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeaconSignal::seq() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.seq)
  return _internal_seq();
}
inline void BeaconSignal::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  seq_ = value;
}
inline void BeaconSignal::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.BeaconSignal.seq)
}

// required uint32 number = 8;
inline bool BeaconSignal::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BeaconSignal::has_number() const {
  return _internal_has_number();
}
inline void BeaconSignal::clear_number() {
  number_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeaconSignal::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeaconSignal::number() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.number)
  return _internal_number();
}
inline void BeaconSignal::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  number_ = value;
}
inline void BeaconSignal::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.BeaconSignal.number)
}

// required string team_name = 4;
inline bool BeaconSignal::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeaconSignal::has_team_name() const {
  return _internal_has_team_name();
}
inline void BeaconSignal::clear_team_name() {
  team_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BeaconSignal::team_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.team_name)
  return _internal_team_name();
}
inline void BeaconSignal::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.BeaconSignal.team_name)
}
inline std::string* BeaconSignal::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.BeaconSignal.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& BeaconSignal::_internal_team_name() const {
  return team_name_.Get();
}
inline void BeaconSignal::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BeaconSignal::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.BeaconSignal.team_name)
}
inline void BeaconSignal::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:llsf_msgs.BeaconSignal.team_name)
}
inline void BeaconSignal::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.BeaconSignal.team_name)
}
inline std::string* BeaconSignal::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BeaconSignal::release_team_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.BeaconSignal.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeaconSignal::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.BeaconSignal.team_name)
}
inline std::string* BeaconSignal::unsafe_arena_release_team_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:llsf_msgs.BeaconSignal.team_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BeaconSignal::unsafe_arena_set_allocated_team_name(
    std::string* team_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      team_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:llsf_msgs.BeaconSignal.team_name)
}

// required string peer_name = 5;
inline bool BeaconSignal::_internal_has_peer_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BeaconSignal::has_peer_name() const {
  return _internal_has_peer_name();
}
inline void BeaconSignal::clear_peer_name() {
  peer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BeaconSignal::peer_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.peer_name)
  return _internal_peer_name();
}
inline void BeaconSignal::set_peer_name(const std::string& value) {
  _internal_set_peer_name(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.BeaconSignal.peer_name)
}
inline std::string* BeaconSignal::mutable_peer_name() {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.BeaconSignal.peer_name)
  return _internal_mutable_peer_name();
}
inline const std::string& BeaconSignal::_internal_peer_name() const {
  return peer_name_.Get();
}
inline void BeaconSignal::_internal_set_peer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BeaconSignal::set_peer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.BeaconSignal.peer_name)
}
inline void BeaconSignal::set_peer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:llsf_msgs.BeaconSignal.peer_name)
}
inline void BeaconSignal::set_peer_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.BeaconSignal.peer_name)
}
inline std::string* BeaconSignal::_internal_mutable_peer_name() {
  _has_bits_[0] |= 0x00000002u;
  return peer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BeaconSignal::release_peer_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.BeaconSignal.peer_name)
  if (!_internal_has_peer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return peer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeaconSignal::set_allocated_peer_name(std::string* peer_name) {
  if (peer_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.BeaconSignal.peer_name)
}
inline std::string* BeaconSignal::unsafe_arena_release_peer_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:llsf_msgs.BeaconSignal.peer_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return peer_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BeaconSignal::unsafe_arena_set_allocated_peer_name(
    std::string* peer_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (peer_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      peer_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:llsf_msgs.BeaconSignal.peer_name)
}

// optional .llsf_msgs.Team team_color = 6;
inline bool BeaconSignal::_internal_has_team_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BeaconSignal::has_team_color() const {
  return _internal_has_team_color();
}
inline void BeaconSignal::clear_team_color() {
  team_color_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::llsf_msgs::Team BeaconSignal::_internal_team_color() const {
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline ::llsf_msgs::Team BeaconSignal::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.team_color)
  return _internal_team_color();
}
inline void BeaconSignal::_internal_set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  team_color_ = value;
}
inline void BeaconSignal::set_team_color(::llsf_msgs::Team value) {
  _internal_set_team_color(value);
  // @@protoc_insertion_point(field_set:llsf_msgs.BeaconSignal.team_color)
}

// optional .llsf_msgs.Pose2D pose = 7;
inline bool BeaconSignal::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool BeaconSignal::has_pose() const {
  return _internal_has_pose();
}
inline const ::llsf_msgs::Pose2D& BeaconSignal::_internal_pose() const {
  const ::llsf_msgs::Pose2D* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::llsf_msgs::Pose2D*>(
      &::llsf_msgs::_Pose2D_default_instance_);
}
inline const ::llsf_msgs::Pose2D& BeaconSignal::pose() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.BeaconSignal.pose)
  return _internal_pose();
}
inline void BeaconSignal::unsafe_arena_set_allocated_pose(
    ::llsf_msgs::Pose2D* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:llsf_msgs.BeaconSignal.pose)
}
inline ::llsf_msgs::Pose2D* BeaconSignal::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::llsf_msgs::Pose2D* BeaconSignal::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:llsf_msgs.BeaconSignal.pose)
  _has_bits_[0] &= ~0x00000008u;
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::llsf_msgs::Pose2D* BeaconSignal::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000008u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Pose2D>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::llsf_msgs::Pose2D* BeaconSignal::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.BeaconSignal.pose)
  return _internal_mutable_pose();
}
inline void BeaconSignal::set_allocated_pose(::llsf_msgs::Pose2D* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.BeaconSignal.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::llsf_msgs::BeaconSignal_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::BeaconSignal_CompType>() {
  return ::llsf_msgs::BeaconSignal_CompType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BeaconSignal_2eproto
